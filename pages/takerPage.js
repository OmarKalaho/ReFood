import * as React from "react";
import Head from "next/head";
import Map from "../components/mapComp/map";
import Snackbar from '@mui/material/Snackbar'
import {
  DataGrid,
  GridRowsProp,
  GridColDef,
  GridToolbar,
  GridToolbarContainer,
  GridToolbarColumnsButton,
  GridToolbarFilterButton,
  GridToolbarExport,
  GridToolbarDensitySelector,
} from "@mui/x-data-grid";
import { useDemoData } from "@mui/x-data-grid-generator";
import Grid from "@mui/material/Grid";
import Paper from "@mui/material/Paper";
import ButtonGroup from "@mui/material/ButtonGroup";
import Button from "@mui/material/Button";
import dayjs from "dayjs";
import relativeTime from 'dayjs/plugin/relativeTime';
import StyledDataGrid from "../components/takerPageComp/styledDataGrid";
import Buttons from "../components/takerPageComp/acceptDeclineButtons";
import Dialog from "../components/takerPageComp/takerDialog";
import { Box } from "@mui/material";
import DataGridCont from "../components/takerPageComp/dataGridCont";
import ViewMenuButton from "../components/takerPageComp/viewMenuButton";
dayjs.extend(relativeTime);





const TakerPage = () => {
  const [mapCenter, setMapCenter] = React.useState([])
  const [rows, setRows] = React.useState([]);
  const [acceptedRows, setAcceptedRows] = React.useState([]);
  const [trashCanRows, setTrashCanRows] = React.useState([]);
  const [open, setOpen] = React.useState(false);
  const [browId, bsetRowId] = React.useState(null);
  const [tableView, setTableView] = React.useState("pendingTable");
  let dataGridRows = rows;
  if (tableView == "acceptedTable") {
    dataGridRows = acceptedRows;
  }

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleRowClick = React.useCallback((params,
    event,
    details,
  ) => {
    setMapCenter([params.row.PickupLocation.latLng]);
    bsetRowId(params.row._id);
  });

  // const handleCellClick = (params,
  //   event,
  //   details,
  // ) => {
  //   console.log(params);
  // }

  const handleTableViewChange = React.useCallback((table) => {
    setTableView(table);
  })

  const handleAcceptClick = (courierName, courierNumber) => {
    let newRows = rows.filter((row) => row._id !== browId)
    setRows(newRows);
    let AcceptanceDetails = { courierName, courierNumber, organizationName: "Hefez al Nemah" };
    let object = { AcceptanceStatus: "Accepted", AcceptanceDetails }
    fetch(`${process.env.NEXT_PUBLIC_APP_API_URL}/giveAways/` + browId,
      { method: 'PATCH', body: JSON.stringify(object), headers: { 'Content-Type': 'application/json' } })
      .then((response) => {
        if (response.ok) {
          return response.json();
        }
      }).then(() => {
        setAcceptedRows([...acceptedRows, rows.filter((row) => row._id === browId)[0]]);
      }).catch(

        console.log("error")
      )
  }

  React.useEffect(() => {
    (async () => {
      let response = await fetch(`${process.env.NEXT_PUBLIC_APP_API_URL}/giveAways/Pending`, { method: 'GET' });
      let data = await response.json();
      if (response.ok) {
        if (data.length > 0) {
          setRows(data);
          setMapCenter([data[0].PickupLocation.latLng])
        }
      }

    })();

  }, []);


  React.useEffect(() => {
    (async () => {
      let response = await fetch(`${process.env.NEXT_PUBLIC_APP_API_URL}/giveAways/Accepted`, { method: 'GET' })
      let data = await response.json();
      if (response.ok) {
        if (data.length > 0) {
          setAcceptedRows(data);
          // setMapCenter(data.map((trashCan) => {
          //  return trashCan.PickupLocation.latLng;
          // })
          // );
        }
      }

    })();
  }, []);
  React.useEffect(() => {
    (async () => {
      let response = await fetch(`${process.env.NEXT_PUBLIC_APP_API_URL}/foodTrashCans/`, { method: 'GET' })
      let data = await response.json();
      if (response.ok) {
        if (data.length > 0) {
          setTrashCanRows(data);
          setMapCenter(data.map((trashCan) => {
            trashCan.PickupLocation.latLng ;
  
          })
          );
        }
      }

    })();
  }, []);


  return (
    <>
      <Head>
        <title>ReFood</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/image1.png" size />
      </Head>
      <Dialog open={open} handleClose={handleClose} handleAcceptClick={handleAcceptClick} />
      <Grid container
        spacing={3} sx={{ marginTop: '10vh', height: '90vh', paddingX: '1.3em', paddingY: '0' }}
      >
        <Grid item xs={12} md={8} >
        <DataGridCont tableView={tableView} 
        handleTableViewChange={handleTableViewChange} 
        dataGridRows={dataGridRows}
        handleRowClick={handleRowClick}
        handleClickOpen={handleClickOpen}
        trashCanRows= {trashCanRows} />
        </Grid>
        <Grid item xs={12} md={4} sx={{ marginTop: '4px' }}>
          <Map center={mapCenter} />
        </Grid>
      </Grid>

    </>
  );
};
export default TakerPage;
