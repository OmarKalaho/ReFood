import * as React from "react";
import Head from "next/head";
import Map from "../components/mapComp/map";
import {
  DataGrid,
  GridRowsProp,
  GridColDef,
  GridToolbar,
} from "@mui/x-data-grid";
import { useDemoData } from "@mui/x-data-grid-generator";
import Grid from "@mui/material/Grid";
import Paper from "@mui/material/Paper";
import ButtonGroup from "@mui/material/ButtonGroup";
import Button from "@mui/material/Button";
import dayjs from "dayjs";
import relativeTime from 'dayjs/plugin/relativeTime';
import StyledDataGrid from "../components/takerPageComp/styledDataGrid";
import Buttons from "../components/takerPageComp/acceptDeclineButtons";
import Dialog from "../components/takerPageComp/takerDialog";
dayjs.extend(relativeTime);





const TakerPage = () => {
  const [mapCenter, setMapCenter] = React.useState({})
  const [rows, setRows] = React.useState([]);
  const [acceptedRows, setAcceptedRows] = React.useState([]);
  const [open, setOpen] = React.useState(false);
  const [browId, bsetRowId] = React.useState(null);
  const columns = React.useMemo(
    () => [
      {

        field: "createdAt", headerName: "Time", width: 100,
        valueGetter: ({ row }) => {

          return new dayjs(row.createdAt).from(new dayjs());
        }
      },
      {
        field: "PickupLocation", headerName: "Location", width: 270,
        valueGetter: ({ row }) => {

          return row.PickupLocation.address;
        }
      },
      {
        field: "FoodQuantity", headerName: "Quantity", width: 70,
        type: 'number',
        valueGetter: ({ row }) => {

          return row.FoodQuantity.InedibleFood.quantity || row.FoodQuantity.EdibleFood.quantity;
        }
      },
      {
        field: "FoodUnit", headerName: "Unit", width: 60,
        valueGetter: ({ row }) => {

          return row.FoodQuantity.InedibleFood.unit || row.FoodQuantity.EdibleFood.unit;
        }
      },
      {
        field: "PickupTime", headerName: "Due", width: 110, valueGetter: ({ row }) => {

          return new dayjs(row.PickupTime).from(new dayjs());
        }
      },
      {
        field: "col6", headerName: "Actions", width: 80,
        renderCell: (params) => ((<Buttons onAClick={handleClickOpen} />))
      },
      {
        field: "ExtraRemarks", headerName: "Remarks", flex: 1,
        minWidth: 170,
      },
    ], []);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };



  const handleRowClick = (params,
    event,
    details,
  ) => {
    setMapCenter(params.row.PickupLocation.latLng);
    bsetRowId(params.row._id);
  }

  // const handleCellClick = (params,
  //   event,
  //   details,
  // ) => {
  //   console.log(params);
  // }

  const handleAcceptClick = (courierName, courierNumber) => {
    let newRows = rows.filter((row) => row._id !== browId)
    setRows(newRows);
    let AcceptanceDetails={ courierName, courierNumber, organizationName: "Hefez al Nemah" };
    let object = {AcceptanceStatus: "Accepted", AcceptanceDetails }
    fetch("http://localhost:4000/api/giveAways/" + browId, 
    { method: 'PATCH', body: JSON.stringify(object), headers: { 'Content-Type': 'application/json' } })
      .then((response) => {
        if (response.ok) {
          return response.json();
        }

      }).then((data) => { console.log(data) })

  }



  React.useEffect(() => {
    fetch("http://localhost:4000/api/giveAways", { method: 'GET' })
      .then((response) => {
        if (response.ok) {
          return response.json();
        }
      })
      .then((data) => {
        console.log(data)
        setRows(data);
        setMapCenter(data[0].PickupLocation.latLng)
      });


  }, []);
  return (
    <>
      <Head>
        <title>ReFood</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/image1.png" size />
      </Head>
      <Dialog open={open} handleClose={handleClose} handleAcceptClick={handleAcceptClick} />
      <Grid container
        spacing={3} sx={{ marginTop: '8.5vh', height: '90vh', paddingX: '1.3em', paddingY: '0' }}
      >
        <Grid item xs={12} md={8} >
          <StyledDataGrid
            rows={rows}
            columns={columns}
            components={{
              Toolbar: GridToolbar,
            }}
            getRowId={(row) => row._id}
            getRowHeight={() => 'auto'}
            onRowClick={handleRowClick}
            // onCellClick={handleCellClick}
            initialState={{
              columns: {
                columnVisibilityModel: {
                  createdAt: false,
                },
              },
            }}

          // loading

          />
        </Grid>
        <Grid item xs={12} md={4} sx={{ marginTop: '4px' }}>
          <Map center={mapCenter} />
        </Grid>
      </Grid>

    </>
  );
};
export default TakerPage;
